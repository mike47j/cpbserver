/*
    CPBserver: leader board or results
    Copyright (C) 2014  Mike Johnson

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
// rounds file

var medalalloc = new Array(
new Array("", ""),
new Array("York", "W JWU18 JWU16 JWU14 JWU12 M JMU18 JMU16 JMU14 JMU12 "),
new Array("Hereford / Bristol 1", "W JWU18 JWU16 JWU14 JWU12 JMU18 JMU16 JMU14 JMU12 "),
new Array("Burntwood York", "W JWU18 JWU16 JWU14 JWU12 M JMU18 JMU16 JMU14 JMU12 "),
new Array("Burntwood Hereford", "W JWU18 JWU16 JWU14 JWU12 JMU18 JMU16 JMU14 JMU12 "),
new Array("Bristol 2", "JWU18 JWU16 JWU14 JWU12 JMU16 JMU14 JMU12 "),
new Array("Bristol 3", "JWU16 JWU14 JWU12 JMU14 JMU12 "),
new Array("Bristol 4", "JWU14 JWU12 JMU12 "),
new Array("Bristol 5", "JWU12 "),
new Array("St. George", "W JWU18 JWU16 JWU14 JWU12 M JMU18 JMU16 JMU14 JMU12 "),
new Array("Albion", "W JWU18 JWU16 JWU14 JWU12 JMU18 JMU16 JMU14 JMU12 "),
new Array("Windsor", "JWU18 JWU16 JWU14 JWU12 JMU16 JMU14 JMU12 "),
new Array("Short Windsor", "JWU16 JWU14 JWU12 JMU14 JMU12 "),
new Array("Junior Windsor", "JWU14 JWU12 JMU12 "),
new Array("Short Junior Windsor", "JWU12 "),
new Array("New Western", "W JWU18 JWU16 JWU14 JWU12 M JMU18 JMU16 JMU14 JMU12 "),
new Array("Long Western", "W JWU18 JWU16 JWU14 JWU12 JMU18 JMU16 JMU14 JMU12 "),
new Array("Western", "JWU18 JWU16 JWU14 JWU12 JMU16 JMU14 JMU12 "),
new Array("Short Western", "JWU16 JWU14 JWU12 JMU14 JMU12 "),
new Array("Junior Western", "JWU14 JWU12 JMU12 "),
new Array("Short Junior Western", "JWU12 "),
new Array("New National", "W JWU18 JWU16 JWU14 JWU12 M JMU18 JMU16 JMU14 JMU12 "),
new Array("Long National", "W JWU18 JWU16 JWU14 JWU12 JMU18 JMU16 JMU14 JMU12 "),
new Array("National", "JWU18 JWU16 JWU14 JWU12 JMU16 JMU14 JMU12 "),
new Array("Short National", "JWU16 JWU14 JWU12 JMU14 JMU12 "),
new Array("Junior National", "JWU14 JWU12 JMU12 "),
new Array("Short Junior National", "JWU12 "),
new Array("New Warwick", "W JWU18 JWU16 JWU14 JWU12 M JMU18 JMU16 JMU14 JMU12 "),
new Array("Long Warwick", "W JWU18 JWU16 JWU14 JWU12 JMU18 JMU16 JMU14 JMU12 "),
new Array("Warwick", "JWU18 JWU16 JWU14 JWU12 JMU16 JMU14 JMU12 "),
new Array("Short Warwick", "JWU16 JWU14 JWU12 JMU14 JMU12 "),
new Array("Junior Warwick", "JWU14 JWU12 JMU12 "),
new Array("Short Junior Warwick", "JWU12 "),
new Array("WA 1440 (Gentlemen)", "W JWU18 JWU16 JWU14 JWU12 M JMU18 JMU16 JMU14 JMU12 "),
new Array("WA 1440 (Ladies)", "W JWU18 JWU16 JWU14 JWU12 JMU18 JMU16 JMU14 JMU12 "),
new Array("WA 1440 (Cadet Ladies)", "JWU18 JWU16 JWU14 JWU12 JMU16 JMU14 JMU12 "),
new Array("Metric I", "W JWU18 JWU16 JWU14 JWU12 JMU18 JMU16 JMU14 JMU12 "),
new Array("Metric II", "JWU18 JWU16 JWU14 JWU12 JMU16 JMU14 JMU12 "),
new Array("Metric III", "JWU16 JWU14 JWU12 JMU14 JMU12 "),
new Array("Metric IV", "JWU14 JWU12 JMU12 "),
new Array("Metric V", "JWU12 "),
new Array("Long Metric", "W JWU18 JWU16 JWU14 JWU12 M JMU18 JMU16 JMU14 JMU12 "),
new Array("Long Metric I", "W JWU18 JWU16 JWU14 JWU12 JMU18 JMU16 JMU14 JMU12 "),
new Array("Long Metric II", "JWU18 JWU16 JWU14 JWU12 JMU16 JMU14 JMU12 "),
new Array("Long Metric III", "JWU16 JWU14 JWU12 JMU14 JMU12 "),
new Array("Long Metric IV", "JWU14 JWU12 JMU12 "),
new Array("Long Metric V", "JWU12 ")
);

// Handicap calculation for best junior or archer

var handicaps = new Array(
    new Array("WR", 41),
    new Array("JWU18R", 48),
    new Array("JWU16R", 58),
    new Array("JWU14R", 64),
    new Array("JWU12R", 70),
    new Array("WC", 29),
    new Array("JWU18C", 38),
    new Array("JWU16C", 49),
    new Array("JWU14C", 55),
    new Array("JWU12C", 63),
    new Array("WL", 65),
    new Array("JWU18L", 64),
    new Array("JWU16L", 70),
    new Array("JWU14L", 77),
    new Array("JWU12L", 83),
    new Array("WB", 57),
    new Array("JWU18B", 59),
    new Array("JWU16B", 65),
    new Array("JWU14B", 72),
    new Array("JWU12B", 78),
    new Array("MR", 36),
    new Array("JMU18R", 39),
    new Array("JMU16R", 48),
    new Array("JMU14R", 58),
    new Array("JMU12R", 69),
    new Array("MC", 23),
    new Array("JMU18C", 32),
    new Array("JMU16C", 38),
    new Array("JMU14C", 48),
    new Array("JMU12C", 56),
    new Array("ML", 60),
    new Array("JMU18L", 62),
    new Array("JMU16L", 65),
    new Array("JMU14L", 72),
    new Array("JMU12L", 81),
    new Array("MB", 49),
    new Array("JMU18B", 57),
    new Array("JMU16B", 60),
    new Array("JMU14B", 67),
    new Array("JMU12B", 75)
);

function partscore(range, y, N, D, t, h) {
    var score, sr, n;
    if (N == 0)
	return 0;
    if (y == 0)
	range *= 0.9144;
    sr = 100 * range * Math.pow(1.036, h + 12.9) * 5e-4 * (1 + 1.429e-6 * Math.pow(1.07, h + 4.3) * range * range);
    switch (t) {
	case 0: // metric
	    score = 10;
	    for (n = 1; n <= 10; n++) {
		score -= Math.exp(-Math.pow((n * D / 20 + 0.357) / sr, 2));
	    }
	    break;
	case 1: // imperial
	    score = 9;
	    for (n = 1; n <= 4; n++) {
		score -= 2 * Math.exp(-Math.pow((n * D / 10 + 0.357) / sr, 2));
	    }
	    score -= Math.exp(-Math.pow((D / 2 + 0.357) / sr, 2));
	    break;
	case 2: // inner ten
	    score = 10;
	    score -= Math.exp(-Math.pow((D / 40 + 0.357) / sr, 2));
	    for (n = 2; n <= 10; n++) {
		score -= Math.exp(-Math.pow((n * D / 20 + 0.357) / sr, 2));
	    }
	    break;
	case 3: // triple
	    score = 10;
	    for (n = 1; n <= 4; n++) {
		score -= Math.exp(-Math.pow((n * D / 20 + 0.357) / sr, 2));
	    }
	    score -= 6 * Math.exp(-Math.pow((5 * D / 20 + 0.357) / sr, 2));
	    break;
	case 4: // inner ten triple
	    score = 10;
	    score -= Math.exp(-Math.pow((D / 40 + 0.357) / sr, 2));
	    for (n = 2; n <= 4; n++) {
		score -= Math.exp(-Math.pow((n * D / 20 + 0.357) / sr, 2));
	    }
	    score -= 6 * Math.exp(-Math.pow((5 * D / 20 + 0.357) / sr, 2));
	    break;
	case 5: // worcester
	    score = 5;
	    for (n = 1; n <= 5; n++) {
		score -= Math.exp(-Math.pow((n * D / 10 + 0.357) / sr, 2));
	    }
	    break;
	case 6: // 5 spot worcester
	    score = 5;
	    score -= Math.exp(-Math.pow((D / 10 + 0.357) / sr, 2));
	    score -= 4 * Math.exp(-Math.pow((2 * D / 10 + 0.357) / sr, 2));
	    break;
	case 7: // 6 zone metric
	    score = 10;
	    for (n = 1; n <= 5; n++) {
		score -= Math.exp(-Math.pow((n * D / 20 + 0.357) / sr, 2));
	    }
	    score -= 5 * Math.exp(-Math.pow((6 * D / 20 + 0.357) / sr, 2));
	    break;
	case 8: // hit/miss
	    score = 1;
	    score -= Math.exp(-Math.pow((D / 2 + 0.357) / sr, 2));
	    break;
    }
    return score * N;
}

function agbscore(h, r) {
    var i;
    for (i = 0; i < rounds.length; i++) {
	if (rounds[i][RNDNAME] == r) {
	    //	 distance      yards/meters  arrows	diameter      scoring
	    return partscore(rounds[i][RNDDISTANCE1], rounds[i][RNDMETERS], rounds[i][RNDARROWS1], rounds[i][RNDTARGET1], rounds[i][RNDSCORING], h)
		+ partscore(rounds[i][RNDDISTANCE2], rounds[i][RNDMETERS], rounds[i][RNDARROWS2], rounds[i][RNDTARGET2], rounds[i][RNDSCORING], h)
		+ partscore(rounds[i][RNDDISTANCE3], rounds[i][RNDMETERS], rounds[i][RNDARROWS3], rounds[i][RNDTARGET3], rounds[i][RNDSCORING], h)
		+ partscore(rounds[i][RNDDISTANCE4], rounds[i][RNDMETERS], rounds[i][RNDARROWS4], rounds[i][RNDTARGET4], rounds[i][RNDSCORING], h);
	}
    }
    return 0;
}

function partagbscore(h, r, a) { // score after a arrows of a round
    var i, s=0, t=0;
    for (i = 0; i < rounds.length; i++) {
	if (rounds[i][RNDNAME] == r) {
	    //	 distance      yards/meters  arrows	diameter      scoring
	    s += partscore(rounds[i][RNDDISTANCE1], rounds[i][RNDMETERS], (a>t+rounds[i][RNDARROWS1]?rounds[i][RNDARROWS1]:a-t), rounds[i][RNDTARGET1], rounds[i][RNDSCORING], h);
	    t += rounds[i][RNDARROWS1];
	    if (t>a)
		return s;
	    s += partscore(rounds[i][RNDDISTANCE2], rounds[i][RNDMETERS], (a>t+rounds[i][RNDARROWS2]?rounds[i][RNDARROWS2]:a-t), rounds[i][RNDTARGET2], rounds[i][RNDSCORING], h)
	    t += rounds[i][RNDARROWS2];
	    if (t>a)
		return s;
	    s += partscore(rounds[i][RNDDISTANCE3], rounds[i][RNDMETERS], (a>t+rounds[i][RNDARROWS3]?rounds[i][RNDARROWS3]:a-t), rounds[i][RNDTARGET3], rounds[i][RNDSCORING], h)
	    t += rounds[i][RNDARROWS3];
	    if (t>a)
		return s;
	    s += partscore(rounds[i][RNDDISTANCE4], rounds[i][RNDMETERS], (a>t+rounds[i][RNDARROWS4]?rounds[i][RNDARROWS4]:a-t), rounds[i][RNDTARGET4], rounds[i][RNDSCORING], h);
	    return s;
	}
    }
    return 0;
}

// results

var textstr;
if (printing)
	textstr = "<table><tr><td style=\"width=20mm\"><img src=\"/logo.gif\" style=\"height:20mm; width=20mm\" />"
			+ "<td style=\"width:150mm; text-align:center; font-weight:bold;font-size:x-large;font-family:Helvetica,Arial,sans-serif;\">"
			+ tournament + "<td style=\"width=20mm\"><img src=\"/logo.gif\" style=\"height:20mm; width=20mm\" /></table>";
else
	textstr = "<h2 style=\"text-align:center;font-weight:bold;font-size:x-large;font-family:Helvetica,Arial,sans-serif;\">"
        + tournament + "</h2>";
doresults();

function doresults() {
    var exists = new Array();
    var i, j;

	// convert gender format
	for (i=0; i<maxdata; i++) {
		if (data[i][AGEGROUP]!="")
			data[i][GENDER] = "J" + data[i][GENDER] + data[i][AGEGROUP];
	}

	if (printing) {
		var dow = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");
		var month = new Array("January", "Febuary","March","April","May","June","July","August","September","October","November","December");
		var stndrdth = new Array("", "1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th",
			"15th","16th","17th","18th","19th","20th","21st","22nd","23rd","24th","25th","26th","27th","28th","29th","30th","31st" );
		var datev = new Date(parseInt(tournamentdate.substr(6,4)), parseInt(tournamentdate.substr(3,2))-1, parseInt(tournamentdate.substr(0,2)));
		var datestr = dow[datev.getDay()] + " " + stndrdth[datev.getDate()] + " " + month[datev.getMonth()] + " " + datev.getFullYear();
		textstr += "<table><tr><td width=\"160\">Date:</td><td width=\"600\">" + datestr + "</td><tr>";
		textstr += "<tr><td width=\"160\">Venue:</td><td width=\"600\">" + venue + "</td><tr>";
		textstr += "<tr><td width=\"160\">Judges:</td><td width=\"600\">" + judges + "</td><tr>";
		if (patron=="")
			textstr += "<tr><td width=\"160\">Lady Paramount:</td><td width=\"600\">" + paramount + "</td><tr>";
		else
			textstr += "<tr><td width=\"160\">Gentleman Patron:</td><td width=\"600\">" + patron + "</td><tr>";
		textstr += "<tr><td width=\"160\">Tournament Organiser:</td><td width=\"600\">" + tournamentorganiser + "</td><tr>";
		textstr += "<tr><td width=\"160\">Weather:</td><td width=\"600\">" + weather + "</td><tr>";
		textstr += "</table>";
	}

    // create link string
    var jumpstr = "";
    if (resultsbyroundflag == 1) {
		for (i = 0; i < rounds.length; i++) {
			exists[i] = false;
			for (j = 0; j < maxdata; j++) {
				if (data[j][ROUND] == rounds[i][RNDNAME]) {
					if (!printing && scrollstate < 0) {
						if (jumpstr != "")
							jumpstr += " | ";
						jumpstr += "<a href=\"#" + data[j][ROUND] + "\">" + data[j][ROUND] + "</a>";
					}
					exists[i] = true;
					break;
				}
			}
		}
	}

	if (!printing && scrollstate < 0) {
		if (juniorflag == 1) {
			if (jumpstr != "")
				jumpstr += " | ";
			jumpstr += "<a href=\"#Junior\">Junior Championship</a>";
		}
		if (bestflag == 1) {
			if (jumpstr != "")
				jumpstr += " | ";
			jumpstr += "<a href=\"#Best\">Best Archer</a>";
		}
		if (handicapflag == 1) {
			if (jumpstr != "")
				jumpstr += " | ";
			jumpstr += "<a href=\"#hcap\">Handicap</a>";
		}
		jumpstr = "<p style=\"text-align:center;\">" + jumpstr + "</p>";
	}

	// rounds
	for (i = 0; i < rounds.length; i++) {
		if (exists[i]) {
		textstr += "<a name=\"" + rounds[i][RNDNAME] + "\"></a>" + jumpstr;
		round(rounds[i][RNDNAME]);
		if (teamflag==1)
			bestteam(rounds[i][RNDNAME]);
		}
	}


	if (juniorflag == 1) {
		textstr += "<a name=\"Junior\"></a>" + jumpstr;
		bestjunior("JW");
		bestjunior("JM");
	}

	if (bestflag == 1) {
		textstr += "<a name=\"Best\"></a>" + jumpstr;
		bestarcher();
	}

    if (handicapflag==1) {
		textstr += "<a name=\"hcap\"></a>" + jumpstr;
		handicapresults();
	}
	textstr += jumpstr;
    document.getElementById("page").innerHTML = textstr;
}

function round(rndstr) {
    gender(rndstr, "W");
    gender(rndstr, "M");
}

function gender(rndstr, g) {
    bowtype(rndstr, g, "Compound");
    bowtype(rndstr, g, "Recurve");
    bowtype(rndstr, g, "Bare Bow");
    bowtype(rndstr, g, "Longbow");
}

function bowtype(rndstr, g, bow) {
    var scores = new Array();
    var i, j, highi = 0, highv = 0, count = 0, countm = 0;
    var awards = "&nbsp;";
    var gs;
    var gendermatch, roundmatch;

	var tb1str = "Hits", tb2str = "Golds", roundno;
    for (i = 0; i < rounds.length; i++) {
		if (rndstr == rounds[i][RNDNAME]) {
			roundno = i;
			if (rounds[i][RNDTIEBREAK]==TieBreakWAOutdoor) {
				tb1str = "X/10";
				tb2str = "X"
			}
			else if (rounds[i][RNDTIEBREAK]==TieBreakWAIndoor) {
				tb1str = "X/10";
				tb2str = "9"
			}
			else if (rounds[i][RNDTIEBREAK]==TieBreakAGBWorcester)
				tb2str = "5";
			else if (rounds[i][RNDTIEBREAK]==TieBreakAGBMetric)
				tb2str ="10";
			break;
		}
    }

    var medalline = 0;
    for (i = 0; i < medalalloc.length; i++) {
		if (rndstr == medalalloc[i][0]) {
			medalline = i;
			break;
		}
    }

    // score if include in this list
    for (i = 0; i < maxdata; i++) {
		scores[i] = -99999;

		if (g == "W") {
			gendermatch = (data[i][GENDER].substr(0, 2) == "JW" || data[i][GENDER] == "W");
			gs = "Women's ";
		}
		else { // (g == "M")
			gendermatch = (data[i][GENDER].substr(0, 2) == "JM" || data[i][GENDER] == "M");
			gs = "Men's ";
		}

		roundmatch = (data[i][ROUND] == rndstr);
		if (data[i][STATE] != "Free") {
			if (data[i][BOW] == bow && gendermatch && roundmatch) {
				scores[i] = data[i][SCORE] + data[i][TIEBREAK1] / 1000 + data[i][TIEBREAK2] / 1000000;
				count++;
				if (data[i][STATE] == "Inuse" && (medalalloc[medalline][1]=="" 
				  || medalalloc[medalline][1].indexOf(data[i][GENDER]) >= 0))
					countm++
				if (data[i][STATE] == "Retired") // retired at end of list
					scores[i] = scores[i] / 2000 - 0.8;
				if (data[i][STATE] == "DNS") // dns last
					scores[i] = -0.9;
				if (data[i][STATE] == "DQ") // dQ last
					scores[i] = -0.9;
			}
		}
    }

    var highi, highv;
    if (count > 0) {
	// award
	var medalposn = 99;
	awards = "&nbsp;";
	if (medalflag == 1 && countm > 0) {
	    awards = "Gold Medal";
	    medalposn = 1;
	}
	// results
	var roundstr = rndstr;
	if (rndstr=="Hereford / Bristol 1") {
	if (g=="W")
	    roundstr = "Hereford";
	else
		roundstr = "Bristol 1";
	}
    textstr += "<h2 style=\"text-align:center;font-size:x-large;font-family:Helvetica,Arial,sans-serif\">"
		+ roundstr + " - " + gs + bow + "</h2>" 
		+ "<table border=1 style=\"margin-left:auto; margin-right:auto; border-collapse:collapse;\" >"
		+ "<tr style=\"page-break-inside: avoid;\"><th width=\"25\">&nbsp;<th width=\"35\">Target<th width=\"180\">Name"
		+ "<th width=\"170\">Club<th width=\"45\">Score<th width=\"45\">" + tb1str + "<th width=\"45\">" + tb2str
	    + "<th width=\"45\">Arrows";
	if (roundstr.substr(0,6)=="Metric" || roundstr.substr(0,7)=="WA 1440") {
		textstr += "<th>" + rounds[roundno][RNDDISTANCE1] + "m</td>";
		textstr += "<th>" + rounds[roundno][RNDDISTANCE2] + "m</td>";
		textstr += "<th>" + rounds[roundno][RNDDISTANCE3] + "m</td>";
		textstr += "<th>" + rounds[roundno][RNDDISTANCE4] + "m</td>";
	}

	textstr += "<th width=\"100\">&nbsp;</tr>";

	var posn = 1;
	var prevhighv = -1;
	var prevaward = awards;
	var prevawardscore = -1;
	var junior;
	for (i = 0; i < maxdata; i++) {
	    highi = -1;
	    highv = -1;
	    for (j = 0; j < maxdata; j++) {
		if (scores[j] > highv) {
		    highv = scores[j];
		    highi = j;
		}
	    }
	    if (highi == -1)
		break;
	    textstr += "<tr style=\"page-break-inside: avoid;\"><td align=\"center\">";
	    if (data[highi][STATE] == "Inuse")
		textstr += (highv == prevhighv ? "=" : posn);
	    else {
		textstr += "&nbsp;";
		awards = "&nbsp;";
	    }
	    var note = data[highi][STATE];
		if (note == "Inuse")
			note = "&nbsp;";
	    junior = data[highi][AGEGROUP].substr(0, 1) != "";
		textstr += "</td><td align=\"center\">" + data[highi][TARGET] + "</td><td>" + data[highi][FORENAME] + " " + data[highi][SURNAME]
		    + (junior ? " J <font size=\"-2\">" + data[highi][AGEGROUP] + "</font>" : "")
		    + "</td><td>" + data[highi][CLUB] + "</td><td align=\"center\">"
		    + (data[highi][STATE] == "DNS" || data[highi][STATE] == "DQ" ? "&nbsp;" : data[highi][SCORE]) + "</td><td align=\"center\">"
		    + (data[highi][STATE] == "DNS" || data[highi][STATE] == "DQ" ? "&nbsp;" : data[highi][TIEBREAK1]) + "</td><td align=\"center\">"
		    + (data[highi][STATE] == "DNS" || data[highi][STATE] == "DQ" ? "&nbsp;" : data[highi][TIEBREAK2]) + "</td><td align=\"center\">"
		    + data[highi][ARROWCNT] + "</td>";
		if (roundstr.substr(0,6)=="Metric" || roundstr.substr(0,7)=="WA 1440") {
			textstr += "<td align=\"center\">" + distancescore(0, data[highi][ARROWS]) + "</td>";
			textstr += "<td align=\"center\">" + distancescore(36, data[highi][ARROWS]) + "</td>";
			textstr += "<td align=\"center\">" + distancescore(72, data[highi][ARROWS]) + "</td>";
			textstr += "<td align=\"center\">" + distancescore(108, data[highi][ARROWS]) + "</td>";
		}
		textstr += "<td align=\"center\">";
	    if (medalalloc[medalline][1].indexOf(data[highi][GENDER]+" ") >= 0) {
		if (highv == prevawardscore)
		    textstr += prevaward;
		else {
		    textstr += awards;
		    prevaward = awards;
		    prevawardscore = highv;
		}
		if (awards == "Gold Medal") {
		    awards = "Silver Medal";
		    if (data[highi][GENDER].substr(0, 1) != "J" && countm < 4)
			awards = "&nbsp;";
		}
		else if (awards == "Silver Medal") {
		    awards = "Bronze Medal";
		    if (data[highi][GENDER].substr(0, 1) != "J" && countm < 7)
			awards = "&nbsp;";
		}
		else
		    awards = "&nbsp;";
	    }
	    textstr += note + "</td></tr>";
	    prevhighv = highv;
	    posn++;
	    scores[highi] = -1;
	}
	textstr += "</table>";
    }
}

function distancescore(arrowno, arrows) {
    var s = 0;
    for (a=arrowno; a<arrowno+36 && a<arrows.length; a++) {
		if (arrows.charCodeAt(arrowno) - 65 == 0)
			s += 0;
		else if (arrows.charCodeAt(arrowno) - 65 == 11)
			s += 10;
		else
			s += arrows.charCodeAt(arrowno) - 65;
    }
    return s;
}

function handicapresults() {
    var scores = new Array();
    var i, j, highi = 0, highv = 0, count = 0;

    // score if include in this list
    for (i = 0; i < maxdata; i++) {
		scores[i] = -99999;
		if (data[i][STATE] == "Inuse") {
			scores[i] = 1440 - Math.round(partagbscore(data[i][HANDICAP], data[i][ROUND], data[i][ARROWCNT])) + data[i][SCORE];
			count++;
		}
    }

    var highi, highv;
    if (count > 0) {
	// results
    textstr += "<h2 style=\"text-align:center;font-size:x-large;font-family:Helvetica,Arial,sans-serif;\">Handicap Results</h2>"
	    + "<table border=1 style=\"margin-left:auto; margin-right:auto; border-collapse:collapse;\" >"
	    + "<tr style=\"page-break-inside: avoid;\"><th width=\"25\">&nbsp;<th width=\"35\">Target<th width=\"180\">Name<th>Gender"
	    + "<th>Age Group<th width=\"170\">Club<th>Round<th>Bow"
	    + "<th width=\"45\">Score<th width=\"45\">Arrows<th>Adjusted</tr>";
	var posn = 1;
	var prevhighv = -1;
	for (i = 0; i < maxdata; i++) {
	    highi = -1;
	    highv = -1;
	    for (j = 0; j < maxdata; j++) {
		if (scores[j] > highv) {
		    highv = scores[j];
		    highi = j;
		}
	    }
	    if (highi == -1)
			break;

		var roundstr = data[highi][ROUND];
		var gender = "M"
		if (roundstr=="Hereford / Bristol 1") {
		if (data[highi][GENDER]=="W" || data[highi][GENDER].substr(0,2)=="JW") {
			roundstr = "Hereford";
			gender = "W"
	    }
		else
			roundstr = "Bristol 1";
		}
		var agegroup = "";
		if (data[highi][GENDER].substr(0,1)=="J")
			agegroup = data[highi][GENDER].substr(2);
	    textstr += "<tr style=\"page-break-inside: avoid;\"><td align=\"center\">";
	    if (data[highi][STATE] == "Inuse")
			textstr += (highv == prevhighv ? "=" : posn);
	    else {
			textstr += "&nbsp;";
	    }
		textstr += "</td><td align=\"center\">" + data[highi][TARGET] + "</td><td>" + data[highi][FORENAME] + " " 
			+ data[highi][SURNAME] + "<td align=\"center\">" + gender+ "<td align=\"center\">" + agegroup
		    + "</td><td>" + data[highi][CLUB] + "</td><td align=\"center\">" + roundstr
		    + "</td><td align=\"center\">" + data[highi][BOW] + "</td><td align=\"center\">"
		    + (data[highi][STATE] != "Inuse" ? "&nbsp;" : data[highi][SCORE]) + "</td><td align=\"center\">"
		    + data[highi][ARROWCNT] + "</td><td align=\"center\">"
		    + (data[highi][STATE] != "Inuse" ? "&nbsp;" : Math.round(scores[highi]*10)/10) + "</td></tr>";
	    prevhighv = highv;
	    posn++;
	    scores[highi] = -1;
	}
	textstr += "</table>";
    }
}

function bestjunior(g) {
    var scores = new Array();
    var i, j;
    var highi, highv;
    for (i = 0; i < maxdata; i++) {
	scores[i] = -1;
	var gc = g + data[i][GENDER].substr(2, 3) + data[i][BOW].substr(0, 1);
	if (data[i][GENDER].substr(0, 2) == g && data[i][STATE] == "Inuse") {
	    for (j = 0; j < handicaps.length; j++) {
		if (handicaps[j][0] == gc)
		    break;
	    }
	    if (j < handicaps.length)
		scores[i] = data[i][SCORE] * 2000 / agbscore(handicaps[j][1], data[i][ROUND]);
	}
    }
    if (g == "JW")
		textstr += "<h2 style=\"text-align:center;font-size:x-large;font-family:Helvetica,Arial,sans-serif;\">Junior Women's Championship</h2>";
    else
		textstr += "<h2 style=\"text-align:center;font-size:x-large;font-family:Helvetica,Arial,sans-serif;\">Junior Men's Championship</h2>";
    textstr += "<table border=1 style=\"margin-left:auto; margin-right:auto; border-collapse:collapse;\" >"
    + "<tr style=\"page-break-inside: avoid;\"><th width=\"20\">&nbsp;<th>Target<th width=\"150\">Name"
    + "<th width=\"170\">Club<th>Age<br/>Group<th>Bow<th>Round<th>Score<th>Points</tr>";
    var posn = 1;
    var prevhighv = -1;
    for (i = 0; i < maxdata; i++) {
	highi = -1;
	highv = -1;
	for (j = 0; j < maxdata; j++) {
	    if (data[j][GENDER].substr(0, 2) == g && scores[j] > highv) {
		highv = scores[j];
		highi = j;
	    }
	}
	if (highi == -1)
	    break;

	var roundstr = data[highi][ROUND];
	if (roundstr=="Hereford / Bristol 1") {
	if (g=="JW")
	    roundstr = "Hereford";
	else
		roundstr = "Bristol 1";
	}

	textstr += "<tr style=\"page-break-inside: avoid;\"><td align=\"center\">" + (highv == prevhighv ? "=" : posn)
	    + "</td><td align=\"center\">" + data[highi][TARGET]
	    + "</td><td>" + data[highi][FORENAME] + " " + data[highi][SURNAME] + "</td><td>" + data[highi][CLUB] 
		+ "</td><td align=\"center\">" + data[highi][GENDER].substr(2, 3) + "</td><td align=\"center\">" + data[highi][BOW];
	textstr += "</td><td align=\"center\">" + roundstr + "</td><td align=\"center\">" + data[highi][SCORE]
	    + "</td><td align=\"center\">" + Math.round(scores[highi]) + "</td></tr>";
	scores[highi] = -1;
	prevhighv = highv;
	posn++;
    }
    textstr += "</table>";
}

function bestarcher() {
    var scores = new Array();
    var i, j;
    var highi, highv;
    for (i = 0; i < maxdata; i++) {
		scores[i] = -1;
		if (data[i][STATE] == "Inuse") {
			var gc = data[i][GENDER] + data[i][BOW].substr(0, 1);
			for (j = 0; j < handicaps.length; j++) {
			if (handicaps[j][0] == gc)
				break;
			}
			if (j < handicaps.length)
				scores[i] = data[i][SCORE] * 2000 / agbscore(handicaps[j][1], data[i][ROUND]);
		}
    }
    textstr += "<h2 style=\"text-align:center;font-size:x-large;font-family:Helvetica,Arial,sans-serif;\">Best Archer</h2>";
    textstr += "<table border=1 style=\"margin-left:auto;margin-right:auto; border-collapse:collapse;\" >"
    + "<tr style=\"page-break-inside: avoid;\"><th width=\"20\">&nbsp;<th>Target<th width=\"150\">Name"
    + "<th width=\"170\">Club<th>Age<br/>Group<th>Bow<th>Round<th>Score<th>Points</tr>";
    var posn = 1;
    var prevhighv = -1;
    for (i = 0; i < maxdata; i++) {
	highi = -1;
	highv = -1;
	for (j = 0; j < maxdata; j++) {
	    if (scores[j] > highv) {
		highv = scores[j];
		highi = j;
	    }
	}
	if (highi == -1)
	    break;

	var roundstr = data[highi][ROUND];
	if (roundstr=="Hereford / Bristol 1") {
	if (data[highi][GENDER]=="W" || data[highi][GENDER].substr(0,2)=="JW")
	    roundstr = "Hereford";
	else
		roundstr = "Bristol 1";
	}

	textstr += "<tr style=\"page-break-inside: avoid;\"><td align=\"center\">" + (highv == prevhighv ? "=" : posn)
	    + "</td><td align=\"center\">" + data[highi][TARGET]
	    + "</td><td>" + data[highi][FORENAME] + " " + data[highi][SURNAME] + "</td><td>" + data[highi][CLUB] + "</td><td align=\"center\">"
	    + data[highi][GENDER] + "</td><td align=\"center\">" + data[highi][BOW];
	textstr += "</td><td align=\"center\">" + roundstr + "</td><td align=\"center\">" + data[highi][SCORE]
	    + "</td><td align=\"center\">" + Math.round(scores[highi]) + "</td></tr>";
	scores[highi] = -1;
	prevhighv = highv;
	posn++;
    }
    textstr += "</table>";
}

function bestteam(rnd) {
    var teamname = new Array();
    var archernames = new Array();
    var scores = new Array();
    var tiebreak1 = new Array();
    var tiebreak2 = new Array();
    var teamcnt = 0;
    var i, j;
    var highi, highv;
	var tb1str = "Hits", tb2str = "Golds";
    for (i = 0; i < rounds.length; i++) {
		if (rnd == rounds[i][RNDNAME]) {
			if (rounds[i][RNDTIEBREAK]==TieBreakWAOutdoor) {
				tb1str = "X/10";
				tb2str = "X"
			}
			else if (rounds[i][RNDTIEBREAK]==TieBreakWAIndoor) {
				tb1str = "X/10";
				tb2str = "9"
			}
			else if (rounds[i][RNDTIEBREAK]==TieBreakAGBWorcester)
				tb2str = "5";
			else if (rounds[i][RNDTIEBREAK]==TieBreakAGBMetric)
				tb2str ="10";
			break;
		}
    }

    for (i = 0; i < maxdata; i++) {
		if (data[i][ROUND]==rnd && data[i][STATE] == "Inuse" && data[i][TEAM]!="") {
			for (j=0; j<teamcnt; j++) {
			if (teamname[j]==data[i][CLUB]+" "+data[i][TEAM])
				break;
			}
			if (j==teamcnt) {
				teamname[teamcnt]=data[i][CLUB]+" "+data[i][TEAM];
				scores[j]=0;
				tiebreak1[j]=0;
				tiebreak2[j]=0;
				archernames[j]="";
				teamcnt++;
			}
			scores[j] += data[i][SCORE] + data[i][TIEBREAK1] / 1000 + data[i][TIEBREAK2] / 1000000;
			tiebreak1[j] += data[i][TIEBREAK1];
			tiebreak2[j] += data[i][TIEBREAK2];
			if (archernames[j]=="")
				archernames[j] += data[i][FORENAME] + " " + data[i][SURNAME];
			else
				archernames[j] += "<br/>" + data[i][FORENAME] + " " + data[i][SURNAME];
		}
    }
    if (teamcnt==0)
		return;
    textstr += "<h2 style=\"text-align:center;font-size:x-large;font-family:Helvetica,Arial,sans-serif;\">"+rnd+" - Team Results</h2>";
    textstr += "<table border=1 style=\"margin-left:auto;margin-right:auto; border-collapse:collapse;\" >"
    + "<tr style=\"page-break-inside: avoid;\"><th width=\"20\">&nbsp;<th width=\"180\">Team Name<th width=\"180\">Members<th width=\"50\">Score<th width=\"50\">"
	+ tb1str + "<th width=\"50\">" + tb2str + "</tr>";
    var posn = 1;
    var prevhighv = -1;
    for (i = 0; i < maxdata; i++) {
	highi = -1;
	highv = -1;
	for (j = 0; j < maxdata; j++) {
	    if (scores[j] > highv) {
		highv = scores[j];
		highi = j;
	    }
	}
	if (highi == -1)
	    break;

	textstr += "<tr style=\"page-break-inside: avoid;\"><td align=\"center\">" + (highv == prevhighv ? "=" : posn)
	    + "</td><td>" + teamname[highi] + "</td><td>" + "<font size=\"-1\">" + archernames[highi] + "</font></td>";
	textstr +=  "</td><td align=\"center\">" + Math.floor(scores[highi]) 
	    + "</td><td align=\"center\">" + tiebreak1[highi] + "</td><td align=\"center\">" + tiebreak2[highi] + "</td></tr>";
	scores[highi] = -1;
	prevhighv = highv;
	posn++;
    }
    textstr += "</table>";
}

</script>
<noscript>
<p>
    This page needs Javascript enabled in the Internet browser.
</p>
</noscript>
</body>
</html>
